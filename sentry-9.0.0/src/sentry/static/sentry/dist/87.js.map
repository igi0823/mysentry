{"version":3,"sources":["webpack:///87.js","webpack:////usr/src/sentry/node_modules/fuse.js/dist/fuse.js"],"names":["webpackJsonpexports","1700","module","exports","__webpack_require__","root","factory","this","modules","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","obj","toString","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","bitapRegexSearch","bitapSearch","patternAlphabet","Bitap","pattern","_ref","_ref$location","location","undefined","_ref$distance","distance","_ref$threshold","threshold","_ref$maxPatternLength","maxPatternLength","_ref$isCaseSensitive","isCaseSensitive","_ref$tokenSeparator","tokenSeparator","_ref$findAllMatches","findAllMatches","_ref$minMatchCharLeng","minMatchCharLength","options","toLowerCase","text","isMatch","score","matchedIndices","_options","_options2","isArray","deepValue","path","list","dotIndex","indexOf","firstSegment","remaining","slice","len","push","matchmask","arguments","start","end","match","mask","charAt","_i","SPECIAL_CHARS_REGEX","regex","RegExp","replace","matches","matchesLen","_ref$errors","errors","_ref$currentLocation","currentLocation","_ref$expectedLocation","expectedLocation","accuracy","proximity","Math","abs","bitapScore","textLen","currentThreshold","bestLocation","patternLen","matchMask","min","lastIndexOf","_score","lastBitArr","finalScore","binMax","binMin","binMid","floor","max","finish","bitArr","Array","j","charMatch","Fuse","_ref$caseSensitive","caseSensitive","_ref$id","id","_ref$keys","keys","_ref$shouldSort","shouldSort","_ref$getFn","getFn","_ref$sortFn","sortFn","a","b","_ref$tokenize","tokenize","_ref$matchAllTokens","matchAllTokens","_ref$includeMatches","includeMatches","_ref$includeScore","includeScore","_ref$verbose","verbose","setCollection","_log","_prepareSearchers2","_prepareSearchers","tokenSearchers","fullSearcher","_search2","_search","weights","results","_computeScore","_sort","_format","tokens","split","resultMap","_analyze","record","index","_len","item","keysLen","weight","Error","_ref2","_ref3","_ref2$arrayIndex","arrayIndex","_ref3$tokenSearchers","_ref3$fullSearcher","_ref3$resultMap","_ref3$results","exists","averageScore","numTextMatches","mainSearchResult","search","words","scores","tokenSearcher","hasMatchInText","word","tokenSearchResult","scoresLen","_i2","checkTextMatches","existingResult","output","_i3","scoreLen","totalScore","bestScore","nScore","sort","finalOutput","JSON","stringify","transformers","result","data","indices","_len2","_console","console","log","apply"],"mappings":"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","file":"87.js","sourcesContent":["webpackJsonpexports([87],{\n\n/***/ 1700:\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n * Fuse.js v3.2.0 - Lightweight fuzzy-search (http://fusejs.io)\n * \n * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Fuse\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Fuse\"] = factory();\n\telse\n\t\troot[\"Fuse\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bitapRegexSearch = __webpack_require__(5);\nvar bitapSearch = __webpack_require__(7);\nvar patternAlphabet = __webpack_require__(4);\n\nvar Bitap = function () {\n  function Bitap(pattern, _ref) {\n    var _ref$location = _ref.location,\n        location = _ref$location === undefined ? 0 : _ref$location,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === undefined ? 100 : _ref$distance,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,\n        _ref$maxPatternLength = _ref.maxPatternLength,\n        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,\n        _ref$isCaseSensitive = _ref.isCaseSensitive,\n        isCaseSensitive = _ref$isCaseSensitive === undefined ? false : _ref$isCaseSensitive,\n        _ref$tokenSeparator = _ref.tokenSeparator,\n        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;\n\n    _classCallCheck(this, Bitap);\n\n    this.options = {\n      location: location,\n      distance: distance,\n      threshold: threshold,\n      maxPatternLength: maxPatternLength,\n      isCaseSensitive: isCaseSensitive,\n      tokenSeparator: tokenSeparator,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength\n    };\n\n    this.pattern = this.options.isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    if (this.pattern.length <= maxPatternLength) {\n      this.patternAlphabet = patternAlphabet(this.pattern);\n    }\n  }\n\n  _createClass(Bitap, [{\n    key: 'search',\n    value: function search(text) {\n      if (!this.options.isCaseSensitive) {\n        text = text.toLowerCase();\n      }\n\n      // Exact match\n      if (this.pattern === text) {\n        return {\n          isMatch: true,\n          score: 0,\n          matchedIndices: [[0, text.length - 1]]\n        };\n      }\n\n      // When pattern length is greater than the machine word length, just do a a regex comparison\n      var _options = this.options,\n          maxPatternLength = _options.maxPatternLength,\n          tokenSeparator = _options.tokenSeparator;\n\n      if (this.pattern.length > maxPatternLength) {\n        return bitapRegexSearch(text, this.pattern, tokenSeparator);\n      }\n\n      // Otherwise, use Bitap algorithm\n      var _options2 = this.options,\n          location = _options2.location,\n          distance = _options2.distance,\n          threshold = _options2.threshold,\n          findAllMatches = _options2.findAllMatches,\n          minMatchCharLength = _options2.minMatchCharLength;\n\n      return bitapSearch(text, this.pattern, this.patternAlphabet, {\n        location: location,\n        distance: distance,\n        threshold: threshold,\n        findAllMatches: findAllMatches,\n        minMatchCharLength: minMatchCharLength\n      });\n    }\n  }]);\n\n  return Bitap;\n}();\n\n// let x = new Bitap(\"od mn war\", {})\n// let result = x.search(\"Old Man's War\")\n// console.log(result)\n\nmodule.exports = Bitap;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar isArray = __webpack_require__(0);\n\nvar deepValue = function deepValue(obj, path, list) {\n  if (!path) {\n    // If there's no path left, we've gotten to the object we care about.\n    list.push(obj);\n  } else {\n    var dotIndex = path.indexOf('.');\n    var firstSegment = path;\n    var remaining = null;\n\n    if (dotIndex !== -1) {\n      firstSegment = path.slice(0, dotIndex);\n      remaining = path.slice(dotIndex + 1);\n    }\n\n    var value = obj[firstSegment];\n\n    if (value !== null && value !== undefined) {\n      if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n        list.push(value.toString());\n      } else if (isArray(value)) {\n        // Search each item in the array.\n        for (var i = 0, len = value.length; i < len; i += 1) {\n          deepValue(value[i], remaining, list);\n        }\n      } else if (remaining) {\n        // An object. Recurse further.\n        deepValue(value, remaining, list);\n      }\n    }\n  }\n\n  return list;\n};\n\nmodule.exports = function (obj, path) {\n  return deepValue(obj, path, []);\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function () {\n  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var matchedIndices = [];\n  var start = -1;\n  var end = -1;\n  var i = 0;\n\n  for (var len = matchmask.length; i < len; i += 1) {\n    var match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        matchedIndices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    matchedIndices.push([start, i - 1]);\n  }\n\n  return matchedIndices;\n};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (pattern) {\n  var mask = {};\n  var len = pattern.length;\n\n  for (var i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0;\n  }\n\n  for (var _i = 0; _i < len; _i += 1) {\n    mask[pattern.charAt(_i)] |= 1 << len - _i - 1;\n  }\n\n  return mask;\n};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar SPECIAL_CHARS_REGEX = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n\nmodule.exports = function (text, pattern) {\n  var tokenSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : / +/g;\n\n  var regex = new RegExp(pattern.replace(SPECIAL_CHARS_REGEX, '\\\\$&').replace(tokenSeparator, '|'));\n  var matches = text.match(regex);\n  var isMatch = !!matches;\n  var matchedIndices = [];\n\n  if (isMatch) {\n    for (var i = 0, matchesLen = matches.length; i < matchesLen; i += 1) {\n      var match = matches[i];\n      matchedIndices.push([text.indexOf(match), match.length - 1]);\n    }\n  }\n\n  return {\n    // TODO: revisit this score\n    score: isMatch ? 0.5 : 1,\n    isMatch: isMatch,\n    matchedIndices: matchedIndices\n  };\n};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (pattern, _ref) {\n  var _ref$errors = _ref.errors,\n      errors = _ref$errors === undefined ? 0 : _ref$errors,\n      _ref$currentLocation = _ref.currentLocation,\n      currentLocation = _ref$currentLocation === undefined ? 0 : _ref$currentLocation,\n      _ref$expectedLocation = _ref.expectedLocation,\n      expectedLocation = _ref$expectedLocation === undefined ? 0 : _ref$expectedLocation,\n      _ref$distance = _ref.distance,\n      distance = _ref$distance === undefined ? 100 : _ref$distance;\n\n  var accuracy = errors / pattern.length;\n  var proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bitapScore = __webpack_require__(6);\nvar matchedIndices = __webpack_require__(3);\n\nmodule.exports = function (text, pattern, patternAlphabet, _ref) {\n  var _ref$location = _ref.location,\n      location = _ref$location === undefined ? 0 : _ref$location,\n      _ref$distance = _ref.distance,\n      distance = _ref$distance === undefined ? 100 : _ref$distance,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,\n      _ref$findAllMatches = _ref.findAllMatches,\n      findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,\n      _ref$minMatchCharLeng = _ref.minMatchCharLength,\n      minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;\n\n  var expectedLocation = location;\n  // Set starting location at beginning text and initialize the alphabet.\n  var textLen = text.length;\n  // Highest score beyond which we give up.\n  var currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  var bestLocation = text.indexOf(pattern, expectedLocation);\n\n  var patternLen = pattern.length;\n\n  // a mask of the matches\n  var matchMask = [];\n  for (var i = 0; i < textLen; i += 1) {\n    matchMask[i] = 0;\n  }\n\n  if (bestLocation !== -1) {\n    var score = bitapScore(pattern, {\n      errors: 0,\n      currentLocation: bestLocation,\n      expectedLocation: expectedLocation,\n      distance: distance\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n\n    // What about in the other direction? (speed up)\n    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen);\n\n    if (bestLocation !== -1) {\n      var _score = bitapScore(pattern, {\n        errors: 0,\n        currentLocation: bestLocation,\n        expectedLocation: expectedLocation,\n        distance: distance\n      });\n      currentThreshold = Math.min(_score, currentThreshold);\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  var lastBitArr = [];\n  var finalScore = 1;\n  var binMax = patternLen + textLen;\n\n  var mask = 1 << patternLen - 1;\n\n  for (var _i = 0; _i < patternLen; _i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    var binMin = 0;\n    var binMid = binMax;\n\n    while (binMin < binMid) {\n      var _score3 = bitapScore(pattern, {\n        errors: _i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation: expectedLocation,\n        distance: distance\n      });\n\n      if (_score3 <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    var start = Math.max(1, expectedLocation - binMid + 1);\n    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    var bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << _i) - 1;\n\n    for (var j = finish; j >= start; j -= 1) {\n      var currentLocation = j - 1;\n      var charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (charMatch) {\n        matchMask[currentLocation] = 1;\n      }\n\n      // First pass: exact match\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (_i !== 0) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = bitapScore(pattern, {\n          errors: _i,\n          currentLocation: currentLocation,\n          expectedLocation: expectedLocation,\n          distance: distance\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break;\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    var _score2 = bitapScore(pattern, {\n      errors: _i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation: expectedLocation,\n      distance: distance\n    });\n\n    if (_score2 > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  // Count exact matches (those with a score of 0) to be \"almost\" exact\n  return {\n    isMatch: bestLocation >= 0,\n    score: finalScore === 0 ? 0.001 : finalScore,\n    matchedIndices: matchedIndices(matchMask, minMatchCharLength)\n  };\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Bitap = __webpack_require__(1);\nvar deepValue = __webpack_require__(2);\nvar isArray = __webpack_require__(0);\n\nvar Fuse = function () {\n  function Fuse(list, _ref) {\n    var _ref$location = _ref.location,\n        location = _ref$location === undefined ? 0 : _ref$location,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === undefined ? 100 : _ref$distance,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,\n        _ref$maxPatternLength = _ref.maxPatternLength,\n        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,\n        _ref$caseSensitive = _ref.caseSensitive,\n        caseSensitive = _ref$caseSensitive === undefined ? false : _ref$caseSensitive,\n        _ref$tokenSeparator = _ref.tokenSeparator,\n        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng,\n        _ref$id = _ref.id,\n        id = _ref$id === undefined ? null : _ref$id,\n        _ref$keys = _ref.keys,\n        keys = _ref$keys === undefined ? [] : _ref$keys,\n        _ref$shouldSort = _ref.shouldSort,\n        shouldSort = _ref$shouldSort === undefined ? true : _ref$shouldSort,\n        _ref$getFn = _ref.getFn,\n        getFn = _ref$getFn === undefined ? deepValue : _ref$getFn,\n        _ref$sortFn = _ref.sortFn,\n        sortFn = _ref$sortFn === undefined ? function (a, b) {\n      return a.score - b.score;\n    } : _ref$sortFn,\n        _ref$tokenize = _ref.tokenize,\n        tokenize = _ref$tokenize === undefined ? false : _ref$tokenize,\n        _ref$matchAllTokens = _ref.matchAllTokens,\n        matchAllTokens = _ref$matchAllTokens === undefined ? false : _ref$matchAllTokens,\n        _ref$includeMatches = _ref.includeMatches,\n        includeMatches = _ref$includeMatches === undefined ? false : _ref$includeMatches,\n        _ref$includeScore = _ref.includeScore,\n        includeScore = _ref$includeScore === undefined ? false : _ref$includeScore,\n        _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose;\n\n    _classCallCheck(this, Fuse);\n\n    this.options = {\n      location: location,\n      distance: distance,\n      threshold: threshold,\n      maxPatternLength: maxPatternLength,\n      isCaseSensitive: caseSensitive,\n      tokenSeparator: tokenSeparator,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      id: id,\n      keys: keys,\n      includeMatches: includeMatches,\n      includeScore: includeScore,\n      shouldSort: shouldSort,\n      getFn: getFn,\n      sortFn: sortFn,\n      verbose: verbose,\n      tokenize: tokenize,\n      matchAllTokens: matchAllTokens\n    };\n\n    this.setCollection(list);\n  }\n\n  _createClass(Fuse, [{\n    key: 'setCollection',\n    value: function setCollection(list) {\n      this.list = list;\n      return list;\n    }\n  }, {\n    key: 'search',\n    value: function search(pattern) {\n      this._log('---------\\nSearch pattern: \"' + pattern + '\"');\n\n      var _prepareSearchers2 = this._prepareSearchers(pattern),\n          tokenSearchers = _prepareSearchers2.tokenSearchers,\n          fullSearcher = _prepareSearchers2.fullSearcher;\n\n      var _search2 = this._search(tokenSearchers, fullSearcher),\n          weights = _search2.weights,\n          results = _search2.results;\n\n      this._computeScore(weights, results);\n\n      if (this.options.shouldSort) {\n        this._sort(results);\n      }\n\n      return this._format(results);\n    }\n  }, {\n    key: '_prepareSearchers',\n    value: function _prepareSearchers() {\n      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      var tokenSearchers = [];\n\n      if (this.options.tokenize) {\n        // Tokenize on the separator\n        var tokens = pattern.split(this.options.tokenSeparator);\n        for (var i = 0, len = tokens.length; i < len; i += 1) {\n          tokenSearchers.push(new Bitap(tokens[i], this.options));\n        }\n      }\n\n      var fullSearcher = new Bitap(pattern, this.options);\n\n      return { tokenSearchers: tokenSearchers, fullSearcher: fullSearcher };\n    }\n  }, {\n    key: '_search',\n    value: function _search() {\n      var tokenSearchers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var fullSearcher = arguments[1];\n\n      var list = this.list;\n      var resultMap = {};\n      var results = [];\n\n      // Check the first item in the list, if it's a string, then we assume\n      // that every item in the list is also a string, and thus it's a flattened array.\n      if (typeof list[0] === 'string') {\n        // Iterate over every item\n        for (var i = 0, len = list.length; i < len; i += 1) {\n          this._analyze({\n            key: '',\n            value: list[i],\n            record: i,\n            index: i\n          }, {\n            resultMap: resultMap,\n            results: results,\n            tokenSearchers: tokenSearchers,\n            fullSearcher: fullSearcher\n          });\n        }\n\n        return { weights: null, results: results };\n      }\n\n      // Otherwise, the first item is an Object (hopefully), and thus the searching\n      // is done on the values of the keys of each item.\n      var weights = {};\n      for (var _i = 0, _len = list.length; _i < _len; _i += 1) {\n        var item = list[_i];\n        // Iterate over every key\n        for (var j = 0, keysLen = this.options.keys.length; j < keysLen; j += 1) {\n          var key = this.options.keys[j];\n          if (typeof key !== 'string') {\n            weights[key.name] = {\n              weight: 1 - key.weight || 1\n            };\n            if (key.weight <= 0 || key.weight > 1) {\n              throw new Error('Key weight has to be > 0 and <= 1');\n            }\n            key = key.name;\n          } else {\n            weights[key] = {\n              weight: 1\n            };\n          }\n\n          this._analyze({\n            key: key,\n            value: this.options.getFn(item, key),\n            record: item,\n            index: _i\n          }, {\n            resultMap: resultMap,\n            results: results,\n            tokenSearchers: tokenSearchers,\n            fullSearcher: fullSearcher\n          });\n        }\n      }\n\n      return { weights: weights, results: results };\n    }\n  }, {\n    key: '_analyze',\n    value: function _analyze(_ref2, _ref3) {\n      var key = _ref2.key,\n          _ref2$arrayIndex = _ref2.arrayIndex,\n          arrayIndex = _ref2$arrayIndex === undefined ? -1 : _ref2$arrayIndex,\n          value = _ref2.value,\n          record = _ref2.record,\n          index = _ref2.index;\n      var _ref3$tokenSearchers = _ref3.tokenSearchers,\n          tokenSearchers = _ref3$tokenSearchers === undefined ? [] : _ref3$tokenSearchers,\n          _ref3$fullSearcher = _ref3.fullSearcher,\n          fullSearcher = _ref3$fullSearcher === undefined ? [] : _ref3$fullSearcher,\n          _ref3$resultMap = _ref3.resultMap,\n          resultMap = _ref3$resultMap === undefined ? {} : _ref3$resultMap,\n          _ref3$results = _ref3.results,\n          results = _ref3$results === undefined ? [] : _ref3$results;\n\n      // Check if the texvaluet can be searched\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      var exists = false;\n      var averageScore = -1;\n      var numTextMatches = 0;\n\n      if (typeof value === 'string') {\n        this._log('\\nKey: ' + (key === '' ? '-' : key));\n\n        var mainSearchResult = fullSearcher.search(value);\n        this._log('Full text: \"' + value + '\", score: ' + mainSearchResult.score);\n\n        if (this.options.tokenize) {\n          var words = value.split(this.options.tokenSeparator);\n          var scores = [];\n\n          for (var i = 0; i < tokenSearchers.length; i += 1) {\n            var tokenSearcher = tokenSearchers[i];\n\n            this._log('\\nPattern: \"' + tokenSearcher.pattern + '\"');\n\n            // let tokenScores = []\n            var hasMatchInText = false;\n\n            for (var j = 0; j < words.length; j += 1) {\n              var word = words[j];\n              var tokenSearchResult = tokenSearcher.search(word);\n              var obj = {};\n              if (tokenSearchResult.isMatch) {\n                obj[word] = tokenSearchResult.score;\n                exists = true;\n                hasMatchInText = true;\n                scores.push(tokenSearchResult.score);\n              } else {\n                obj[word] = 1;\n                if (!this.options.matchAllTokens) {\n                  scores.push(1);\n                }\n              }\n              this._log('Token: \"' + word + '\", score: ' + obj[word]);\n              // tokenScores.push(obj)\n            }\n\n            if (hasMatchInText) {\n              numTextMatches += 1;\n            }\n          }\n\n          averageScore = scores[0];\n          var scoresLen = scores.length;\n          for (var _i2 = 1; _i2 < scoresLen; _i2 += 1) {\n            averageScore += scores[_i2];\n          }\n          averageScore = averageScore / scoresLen;\n\n          this._log('Token score average:', averageScore);\n        }\n\n        var finalScore = mainSearchResult.score;\n        if (averageScore > -1) {\n          finalScore = (finalScore + averageScore) / 2;\n        }\n\n        this._log('Score average:', finalScore);\n\n        var checkTextMatches = this.options.tokenize && this.options.matchAllTokens ? numTextMatches >= tokenSearchers.length : true;\n\n        this._log('\\nCheck Matches: ' + checkTextMatches);\n\n        // If a match is found, add the item to <rawResults>, including its score\n        if ((exists || mainSearchResult.isMatch) && checkTextMatches) {\n          // Check if the item already exists in our results\n          var existingResult = resultMap[index];\n          if (existingResult) {\n            // Use the lowest score\n            // existingResult.score, bitapResult.score\n            existingResult.output.push({\n              key: key,\n              arrayIndex: arrayIndex,\n              value: value,\n              score: finalScore,\n              matchedIndices: mainSearchResult.matchedIndices\n            });\n          } else {\n            // Add it to the raw result list\n            resultMap[index] = {\n              item: record,\n              output: [{\n                key: key,\n                arrayIndex: arrayIndex,\n                value: value,\n                score: finalScore,\n                matchedIndices: mainSearchResult.matchedIndices\n              }]\n            };\n\n            results.push(resultMap[index]);\n          }\n        }\n      } else if (isArray(value)) {\n        for (var _i3 = 0, len = value.length; _i3 < len; _i3 += 1) {\n          this._analyze({\n            key: key,\n            arrayIndex: _i3,\n            value: value[_i3],\n            record: record,\n            index: index\n          }, {\n            resultMap: resultMap,\n            results: results,\n            tokenSearchers: tokenSearchers,\n            fullSearcher: fullSearcher\n          });\n        }\n      }\n    }\n  }, {\n    key: '_computeScore',\n    value: function _computeScore(weights, results) {\n      this._log('\\n\\nComputing score:\\n');\n\n      for (var i = 0, len = results.length; i < len; i += 1) {\n        var output = results[i].output;\n        var scoreLen = output.length;\n\n        var totalScore = 0;\n        var bestScore = 1;\n\n        for (var j = 0; j < scoreLen; j += 1) {\n          var weight = weights ? weights[output[j].key].weight : 1;\n          var score = weight === 1 ? output[j].score : output[j].score || 0.001;\n          var nScore = score * weight;\n\n          if (weight !== 1) {\n            bestScore = Math.min(bestScore, nScore);\n          } else {\n            output[j].nScore = nScore;\n            totalScore += nScore;\n          }\n        }\n\n        results[i].score = bestScore === 1 ? totalScore / scoreLen : bestScore;\n\n        this._log(results[i]);\n      }\n    }\n  }, {\n    key: '_sort',\n    value: function _sort(results) {\n      this._log('\\n\\nSorting....');\n      results.sort(this.options.sortFn);\n    }\n  }, {\n    key: '_format',\n    value: function _format(results) {\n      var finalOutput = [];\n\n      this._log('\\n\\nOutput:\\n\\n', JSON.stringify(results));\n\n      var transformers = [];\n\n      if (this.options.includeMatches) {\n        transformers.push(function (result, data) {\n          var output = result.output;\n          data.matches = [];\n\n          for (var i = 0, len = output.length; i < len; i += 1) {\n            var item = output[i];\n\n            if (item.matchedIndices.length === 0) {\n              continue;\n            }\n\n            var obj = {\n              indices: item.matchedIndices,\n              value: item.value\n            };\n            if (item.key) {\n              obj.key = item.key;\n            }\n            if (item.hasOwnProperty('arrayIndex') && item.arrayIndex > -1) {\n              obj.arrayIndex = item.arrayIndex;\n            }\n            data.matches.push(obj);\n          }\n        });\n      }\n\n      if (this.options.includeScore) {\n        transformers.push(function (result, data) {\n          data.score = result.score;\n        });\n      }\n\n      for (var i = 0, len = results.length; i < len; i += 1) {\n        var result = results[i];\n\n        if (this.options.id) {\n          result.item = this.options.getFn(result.item, this.options.id)[0];\n        }\n\n        if (!transformers.length) {\n          finalOutput.push(result.item);\n          continue;\n        }\n\n        var data = {\n          item: result.item\n        };\n\n        for (var j = 0, _len2 = transformers.length; j < _len2; j += 1) {\n          transformers[j](result, data);\n        }\n\n        finalOutput.push(data);\n      }\n\n      return finalOutput;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      if (this.options.verbose) {\n        var _console;\n\n        (_console = console).log.apply(_console, arguments);\n      }\n    }\n  }]);\n\n  return Fuse;\n}();\n\nmodule.exports = Fuse;\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=fuse.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 87.js","/*!\n * Fuse.js v3.2.0 - Lightweight fuzzy-search (http://fusejs.io)\n * \n * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Fuse\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Fuse\"] = factory();\n\telse\n\t\troot[\"Fuse\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bitapRegexSearch = __webpack_require__(5);\nvar bitapSearch = __webpack_require__(7);\nvar patternAlphabet = __webpack_require__(4);\n\nvar Bitap = function () {\n  function Bitap(pattern, _ref) {\n    var _ref$location = _ref.location,\n        location = _ref$location === undefined ? 0 : _ref$location,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === undefined ? 100 : _ref$distance,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,\n        _ref$maxPatternLength = _ref.maxPatternLength,\n        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,\n        _ref$isCaseSensitive = _ref.isCaseSensitive,\n        isCaseSensitive = _ref$isCaseSensitive === undefined ? false : _ref$isCaseSensitive,\n        _ref$tokenSeparator = _ref.tokenSeparator,\n        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;\n\n    _classCallCheck(this, Bitap);\n\n    this.options = {\n      location: location,\n      distance: distance,\n      threshold: threshold,\n      maxPatternLength: maxPatternLength,\n      isCaseSensitive: isCaseSensitive,\n      tokenSeparator: tokenSeparator,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength\n    };\n\n    this.pattern = this.options.isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    if (this.pattern.length <= maxPatternLength) {\n      this.patternAlphabet = patternAlphabet(this.pattern);\n    }\n  }\n\n  _createClass(Bitap, [{\n    key: 'search',\n    value: function search(text) {\n      if (!this.options.isCaseSensitive) {\n        text = text.toLowerCase();\n      }\n\n      // Exact match\n      if (this.pattern === text) {\n        return {\n          isMatch: true,\n          score: 0,\n          matchedIndices: [[0, text.length - 1]]\n        };\n      }\n\n      // When pattern length is greater than the machine word length, just do a a regex comparison\n      var _options = this.options,\n          maxPatternLength = _options.maxPatternLength,\n          tokenSeparator = _options.tokenSeparator;\n\n      if (this.pattern.length > maxPatternLength) {\n        return bitapRegexSearch(text, this.pattern, tokenSeparator);\n      }\n\n      // Otherwise, use Bitap algorithm\n      var _options2 = this.options,\n          location = _options2.location,\n          distance = _options2.distance,\n          threshold = _options2.threshold,\n          findAllMatches = _options2.findAllMatches,\n          minMatchCharLength = _options2.minMatchCharLength;\n\n      return bitapSearch(text, this.pattern, this.patternAlphabet, {\n        location: location,\n        distance: distance,\n        threshold: threshold,\n        findAllMatches: findAllMatches,\n        minMatchCharLength: minMatchCharLength\n      });\n    }\n  }]);\n\n  return Bitap;\n}();\n\n// let x = new Bitap(\"od mn war\", {})\n// let result = x.search(\"Old Man's War\")\n// console.log(result)\n\nmodule.exports = Bitap;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar isArray = __webpack_require__(0);\n\nvar deepValue = function deepValue(obj, path, list) {\n  if (!path) {\n    // If there's no path left, we've gotten to the object we care about.\n    list.push(obj);\n  } else {\n    var dotIndex = path.indexOf('.');\n    var firstSegment = path;\n    var remaining = null;\n\n    if (dotIndex !== -1) {\n      firstSegment = path.slice(0, dotIndex);\n      remaining = path.slice(dotIndex + 1);\n    }\n\n    var value = obj[firstSegment];\n\n    if (value !== null && value !== undefined) {\n      if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n        list.push(value.toString());\n      } else if (isArray(value)) {\n        // Search each item in the array.\n        for (var i = 0, len = value.length; i < len; i += 1) {\n          deepValue(value[i], remaining, list);\n        }\n      } else if (remaining) {\n        // An object. Recurse further.\n        deepValue(value, remaining, list);\n      }\n    }\n  }\n\n  return list;\n};\n\nmodule.exports = function (obj, path) {\n  return deepValue(obj, path, []);\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function () {\n  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var matchedIndices = [];\n  var start = -1;\n  var end = -1;\n  var i = 0;\n\n  for (var len = matchmask.length; i < len; i += 1) {\n    var match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        matchedIndices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    matchedIndices.push([start, i - 1]);\n  }\n\n  return matchedIndices;\n};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (pattern) {\n  var mask = {};\n  var len = pattern.length;\n\n  for (var i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0;\n  }\n\n  for (var _i = 0; _i < len; _i += 1) {\n    mask[pattern.charAt(_i)] |= 1 << len - _i - 1;\n  }\n\n  return mask;\n};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar SPECIAL_CHARS_REGEX = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n\nmodule.exports = function (text, pattern) {\n  var tokenSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : / +/g;\n\n  var regex = new RegExp(pattern.replace(SPECIAL_CHARS_REGEX, '\\\\$&').replace(tokenSeparator, '|'));\n  var matches = text.match(regex);\n  var isMatch = !!matches;\n  var matchedIndices = [];\n\n  if (isMatch) {\n    for (var i = 0, matchesLen = matches.length; i < matchesLen; i += 1) {\n      var match = matches[i];\n      matchedIndices.push([text.indexOf(match), match.length - 1]);\n    }\n  }\n\n  return {\n    // TODO: revisit this score\n    score: isMatch ? 0.5 : 1,\n    isMatch: isMatch,\n    matchedIndices: matchedIndices\n  };\n};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = function (pattern, _ref) {\n  var _ref$errors = _ref.errors,\n      errors = _ref$errors === undefined ? 0 : _ref$errors,\n      _ref$currentLocation = _ref.currentLocation,\n      currentLocation = _ref$currentLocation === undefined ? 0 : _ref$currentLocation,\n      _ref$expectedLocation = _ref.expectedLocation,\n      expectedLocation = _ref$expectedLocation === undefined ? 0 : _ref$expectedLocation,\n      _ref$distance = _ref.distance,\n      distance = _ref$distance === undefined ? 100 : _ref$distance;\n\n  var accuracy = errors / pattern.length;\n  var proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bitapScore = __webpack_require__(6);\nvar matchedIndices = __webpack_require__(3);\n\nmodule.exports = function (text, pattern, patternAlphabet, _ref) {\n  var _ref$location = _ref.location,\n      location = _ref$location === undefined ? 0 : _ref$location,\n      _ref$distance = _ref.distance,\n      distance = _ref$distance === undefined ? 100 : _ref$distance,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,\n      _ref$findAllMatches = _ref.findAllMatches,\n      findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,\n      _ref$minMatchCharLeng = _ref.minMatchCharLength,\n      minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;\n\n  var expectedLocation = location;\n  // Set starting location at beginning text and initialize the alphabet.\n  var textLen = text.length;\n  // Highest score beyond which we give up.\n  var currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  var bestLocation = text.indexOf(pattern, expectedLocation);\n\n  var patternLen = pattern.length;\n\n  // a mask of the matches\n  var matchMask = [];\n  for (var i = 0; i < textLen; i += 1) {\n    matchMask[i] = 0;\n  }\n\n  if (bestLocation !== -1) {\n    var score = bitapScore(pattern, {\n      errors: 0,\n      currentLocation: bestLocation,\n      expectedLocation: expectedLocation,\n      distance: distance\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n\n    // What about in the other direction? (speed up)\n    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen);\n\n    if (bestLocation !== -1) {\n      var _score = bitapScore(pattern, {\n        errors: 0,\n        currentLocation: bestLocation,\n        expectedLocation: expectedLocation,\n        distance: distance\n      });\n      currentThreshold = Math.min(_score, currentThreshold);\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  var lastBitArr = [];\n  var finalScore = 1;\n  var binMax = patternLen + textLen;\n\n  var mask = 1 << patternLen - 1;\n\n  for (var _i = 0; _i < patternLen; _i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    var binMin = 0;\n    var binMid = binMax;\n\n    while (binMin < binMid) {\n      var _score3 = bitapScore(pattern, {\n        errors: _i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation: expectedLocation,\n        distance: distance\n      });\n\n      if (_score3 <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    var start = Math.max(1, expectedLocation - binMid + 1);\n    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    var bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << _i) - 1;\n\n    for (var j = finish; j >= start; j -= 1) {\n      var currentLocation = j - 1;\n      var charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (charMatch) {\n        matchMask[currentLocation] = 1;\n      }\n\n      // First pass: exact match\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (_i !== 0) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = bitapScore(pattern, {\n          errors: _i,\n          currentLocation: currentLocation,\n          expectedLocation: expectedLocation,\n          distance: distance\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break;\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    var _score2 = bitapScore(pattern, {\n      errors: _i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation: expectedLocation,\n      distance: distance\n    });\n\n    if (_score2 > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  // Count exact matches (those with a score of 0) to be \"almost\" exact\n  return {\n    isMatch: bestLocation >= 0,\n    score: finalScore === 0 ? 0.001 : finalScore,\n    matchedIndices: matchedIndices(matchMask, minMatchCharLength)\n  };\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Bitap = __webpack_require__(1);\nvar deepValue = __webpack_require__(2);\nvar isArray = __webpack_require__(0);\n\nvar Fuse = function () {\n  function Fuse(list, _ref) {\n    var _ref$location = _ref.location,\n        location = _ref$location === undefined ? 0 : _ref$location,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === undefined ? 100 : _ref$distance,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,\n        _ref$maxPatternLength = _ref.maxPatternLength,\n        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,\n        _ref$caseSensitive = _ref.caseSensitive,\n        caseSensitive = _ref$caseSensitive === undefined ? false : _ref$caseSensitive,\n        _ref$tokenSeparator = _ref.tokenSeparator,\n        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng,\n        _ref$id = _ref.id,\n        id = _ref$id === undefined ? null : _ref$id,\n        _ref$keys = _ref.keys,\n        keys = _ref$keys === undefined ? [] : _ref$keys,\n        _ref$shouldSort = _ref.shouldSort,\n        shouldSort = _ref$shouldSort === undefined ? true : _ref$shouldSort,\n        _ref$getFn = _ref.getFn,\n        getFn = _ref$getFn === undefined ? deepValue : _ref$getFn,\n        _ref$sortFn = _ref.sortFn,\n        sortFn = _ref$sortFn === undefined ? function (a, b) {\n      return a.score - b.score;\n    } : _ref$sortFn,\n        _ref$tokenize = _ref.tokenize,\n        tokenize = _ref$tokenize === undefined ? false : _ref$tokenize,\n        _ref$matchAllTokens = _ref.matchAllTokens,\n        matchAllTokens = _ref$matchAllTokens === undefined ? false : _ref$matchAllTokens,\n        _ref$includeMatches = _ref.includeMatches,\n        includeMatches = _ref$includeMatches === undefined ? false : _ref$includeMatches,\n        _ref$includeScore = _ref.includeScore,\n        includeScore = _ref$includeScore === undefined ? false : _ref$includeScore,\n        _ref$verbose = _ref.verbose,\n        verbose = _ref$verbose === undefined ? false : _ref$verbose;\n\n    _classCallCheck(this, Fuse);\n\n    this.options = {\n      location: location,\n      distance: distance,\n      threshold: threshold,\n      maxPatternLength: maxPatternLength,\n      isCaseSensitive: caseSensitive,\n      tokenSeparator: tokenSeparator,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      id: id,\n      keys: keys,\n      includeMatches: includeMatches,\n      includeScore: includeScore,\n      shouldSort: shouldSort,\n      getFn: getFn,\n      sortFn: sortFn,\n      verbose: verbose,\n      tokenize: tokenize,\n      matchAllTokens: matchAllTokens\n    };\n\n    this.setCollection(list);\n  }\n\n  _createClass(Fuse, [{\n    key: 'setCollection',\n    value: function setCollection(list) {\n      this.list = list;\n      return list;\n    }\n  }, {\n    key: 'search',\n    value: function search(pattern) {\n      this._log('---------\\nSearch pattern: \"' + pattern + '\"');\n\n      var _prepareSearchers2 = this._prepareSearchers(pattern),\n          tokenSearchers = _prepareSearchers2.tokenSearchers,\n          fullSearcher = _prepareSearchers2.fullSearcher;\n\n      var _search2 = this._search(tokenSearchers, fullSearcher),\n          weights = _search2.weights,\n          results = _search2.results;\n\n      this._computeScore(weights, results);\n\n      if (this.options.shouldSort) {\n        this._sort(results);\n      }\n\n      return this._format(results);\n    }\n  }, {\n    key: '_prepareSearchers',\n    value: function _prepareSearchers() {\n      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      var tokenSearchers = [];\n\n      if (this.options.tokenize) {\n        // Tokenize on the separator\n        var tokens = pattern.split(this.options.tokenSeparator);\n        for (var i = 0, len = tokens.length; i < len; i += 1) {\n          tokenSearchers.push(new Bitap(tokens[i], this.options));\n        }\n      }\n\n      var fullSearcher = new Bitap(pattern, this.options);\n\n      return { tokenSearchers: tokenSearchers, fullSearcher: fullSearcher };\n    }\n  }, {\n    key: '_search',\n    value: function _search() {\n      var tokenSearchers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var fullSearcher = arguments[1];\n\n      var list = this.list;\n      var resultMap = {};\n      var results = [];\n\n      // Check the first item in the list, if it's a string, then we assume\n      // that every item in the list is also a string, and thus it's a flattened array.\n      if (typeof list[0] === 'string') {\n        // Iterate over every item\n        for (var i = 0, len = list.length; i < len; i += 1) {\n          this._analyze({\n            key: '',\n            value: list[i],\n            record: i,\n            index: i\n          }, {\n            resultMap: resultMap,\n            results: results,\n            tokenSearchers: tokenSearchers,\n            fullSearcher: fullSearcher\n          });\n        }\n\n        return { weights: null, results: results };\n      }\n\n      // Otherwise, the first item is an Object (hopefully), and thus the searching\n      // is done on the values of the keys of each item.\n      var weights = {};\n      for (var _i = 0, _len = list.length; _i < _len; _i += 1) {\n        var item = list[_i];\n        // Iterate over every key\n        for (var j = 0, keysLen = this.options.keys.length; j < keysLen; j += 1) {\n          var key = this.options.keys[j];\n          if (typeof key !== 'string') {\n            weights[key.name] = {\n              weight: 1 - key.weight || 1\n            };\n            if (key.weight <= 0 || key.weight > 1) {\n              throw new Error('Key weight has to be > 0 and <= 1');\n            }\n            key = key.name;\n          } else {\n            weights[key] = {\n              weight: 1\n            };\n          }\n\n          this._analyze({\n            key: key,\n            value: this.options.getFn(item, key),\n            record: item,\n            index: _i\n          }, {\n            resultMap: resultMap,\n            results: results,\n            tokenSearchers: tokenSearchers,\n            fullSearcher: fullSearcher\n          });\n        }\n      }\n\n      return { weights: weights, results: results };\n    }\n  }, {\n    key: '_analyze',\n    value: function _analyze(_ref2, _ref3) {\n      var key = _ref2.key,\n          _ref2$arrayIndex = _ref2.arrayIndex,\n          arrayIndex = _ref2$arrayIndex === undefined ? -1 : _ref2$arrayIndex,\n          value = _ref2.value,\n          record = _ref2.record,\n          index = _ref2.index;\n      var _ref3$tokenSearchers = _ref3.tokenSearchers,\n          tokenSearchers = _ref3$tokenSearchers === undefined ? [] : _ref3$tokenSearchers,\n          _ref3$fullSearcher = _ref3.fullSearcher,\n          fullSearcher = _ref3$fullSearcher === undefined ? [] : _ref3$fullSearcher,\n          _ref3$resultMap = _ref3.resultMap,\n          resultMap = _ref3$resultMap === undefined ? {} : _ref3$resultMap,\n          _ref3$results = _ref3.results,\n          results = _ref3$results === undefined ? [] : _ref3$results;\n\n      // Check if the texvaluet can be searched\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      var exists = false;\n      var averageScore = -1;\n      var numTextMatches = 0;\n\n      if (typeof value === 'string') {\n        this._log('\\nKey: ' + (key === '' ? '-' : key));\n\n        var mainSearchResult = fullSearcher.search(value);\n        this._log('Full text: \"' + value + '\", score: ' + mainSearchResult.score);\n\n        if (this.options.tokenize) {\n          var words = value.split(this.options.tokenSeparator);\n          var scores = [];\n\n          for (var i = 0; i < tokenSearchers.length; i += 1) {\n            var tokenSearcher = tokenSearchers[i];\n\n            this._log('\\nPattern: \"' + tokenSearcher.pattern + '\"');\n\n            // let tokenScores = []\n            var hasMatchInText = false;\n\n            for (var j = 0; j < words.length; j += 1) {\n              var word = words[j];\n              var tokenSearchResult = tokenSearcher.search(word);\n              var obj = {};\n              if (tokenSearchResult.isMatch) {\n                obj[word] = tokenSearchResult.score;\n                exists = true;\n                hasMatchInText = true;\n                scores.push(tokenSearchResult.score);\n              } else {\n                obj[word] = 1;\n                if (!this.options.matchAllTokens) {\n                  scores.push(1);\n                }\n              }\n              this._log('Token: \"' + word + '\", score: ' + obj[word]);\n              // tokenScores.push(obj)\n            }\n\n            if (hasMatchInText) {\n              numTextMatches += 1;\n            }\n          }\n\n          averageScore = scores[0];\n          var scoresLen = scores.length;\n          for (var _i2 = 1; _i2 < scoresLen; _i2 += 1) {\n            averageScore += scores[_i2];\n          }\n          averageScore = averageScore / scoresLen;\n\n          this._log('Token score average:', averageScore);\n        }\n\n        var finalScore = mainSearchResult.score;\n        if (averageScore > -1) {\n          finalScore = (finalScore + averageScore) / 2;\n        }\n\n        this._log('Score average:', finalScore);\n\n        var checkTextMatches = this.options.tokenize && this.options.matchAllTokens ? numTextMatches >= tokenSearchers.length : true;\n\n        this._log('\\nCheck Matches: ' + checkTextMatches);\n\n        // If a match is found, add the item to <rawResults>, including its score\n        if ((exists || mainSearchResult.isMatch) && checkTextMatches) {\n          // Check if the item already exists in our results\n          var existingResult = resultMap[index];\n          if (existingResult) {\n            // Use the lowest score\n            // existingResult.score, bitapResult.score\n            existingResult.output.push({\n              key: key,\n              arrayIndex: arrayIndex,\n              value: value,\n              score: finalScore,\n              matchedIndices: mainSearchResult.matchedIndices\n            });\n          } else {\n            // Add it to the raw result list\n            resultMap[index] = {\n              item: record,\n              output: [{\n                key: key,\n                arrayIndex: arrayIndex,\n                value: value,\n                score: finalScore,\n                matchedIndices: mainSearchResult.matchedIndices\n              }]\n            };\n\n            results.push(resultMap[index]);\n          }\n        }\n      } else if (isArray(value)) {\n        for (var _i3 = 0, len = value.length; _i3 < len; _i3 += 1) {\n          this._analyze({\n            key: key,\n            arrayIndex: _i3,\n            value: value[_i3],\n            record: record,\n            index: index\n          }, {\n            resultMap: resultMap,\n            results: results,\n            tokenSearchers: tokenSearchers,\n            fullSearcher: fullSearcher\n          });\n        }\n      }\n    }\n  }, {\n    key: '_computeScore',\n    value: function _computeScore(weights, results) {\n      this._log('\\n\\nComputing score:\\n');\n\n      for (var i = 0, len = results.length; i < len; i += 1) {\n        var output = results[i].output;\n        var scoreLen = output.length;\n\n        var totalScore = 0;\n        var bestScore = 1;\n\n        for (var j = 0; j < scoreLen; j += 1) {\n          var weight = weights ? weights[output[j].key].weight : 1;\n          var score = weight === 1 ? output[j].score : output[j].score || 0.001;\n          var nScore = score * weight;\n\n          if (weight !== 1) {\n            bestScore = Math.min(bestScore, nScore);\n          } else {\n            output[j].nScore = nScore;\n            totalScore += nScore;\n          }\n        }\n\n        results[i].score = bestScore === 1 ? totalScore / scoreLen : bestScore;\n\n        this._log(results[i]);\n      }\n    }\n  }, {\n    key: '_sort',\n    value: function _sort(results) {\n      this._log('\\n\\nSorting....');\n      results.sort(this.options.sortFn);\n    }\n  }, {\n    key: '_format',\n    value: function _format(results) {\n      var finalOutput = [];\n\n      this._log('\\n\\nOutput:\\n\\n', JSON.stringify(results));\n\n      var transformers = [];\n\n      if (this.options.includeMatches) {\n        transformers.push(function (result, data) {\n          var output = result.output;\n          data.matches = [];\n\n          for (var i = 0, len = output.length; i < len; i += 1) {\n            var item = output[i];\n\n            if (item.matchedIndices.length === 0) {\n              continue;\n            }\n\n            var obj = {\n              indices: item.matchedIndices,\n              value: item.value\n            };\n            if (item.key) {\n              obj.key = item.key;\n            }\n            if (item.hasOwnProperty('arrayIndex') && item.arrayIndex > -1) {\n              obj.arrayIndex = item.arrayIndex;\n            }\n            data.matches.push(obj);\n          }\n        });\n      }\n\n      if (this.options.includeScore) {\n        transformers.push(function (result, data) {\n          data.score = result.score;\n        });\n      }\n\n      for (var i = 0, len = results.length; i < len; i += 1) {\n        var result = results[i];\n\n        if (this.options.id) {\n          result.item = this.options.getFn(result.item, this.options.id)[0];\n        }\n\n        if (!transformers.length) {\n          finalOutput.push(result.item);\n          continue;\n        }\n\n        var data = {\n          item: result.item\n        };\n\n        for (var j = 0, _len2 = transformers.length; j < _len2; j += 1) {\n          transformers[j](result, data);\n        }\n\n        finalOutput.push(data);\n      }\n\n      return finalOutput;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      if (this.options.verbose) {\n        var _console;\n\n        (_console = console).log.apply(_console, arguments);\n      }\n    }\n  }]);\n\n  return Fuse;\n}();\n\nmodule.exports = Fuse;\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=fuse.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /usr/src/sentry/node_modules/fuse.js/dist/fuse.js\n// module id = 1700\n// module chunks = 87"],"sourceRoot":""}